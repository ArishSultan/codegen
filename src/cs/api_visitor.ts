import { BaseVisitor, Context } from "@apexlang/core/model";
import { camelCase, isService, pascalCase } from "../utils";
import { translations } from "./constant";
import { PathDirective } from "../rest";

export class MinimalAPIVisitor extends BaseVisitor {
  visitNamespaceBefore(context: Context) {
    this.write(`// Code generated by @apexlang/codegen. DO NOT EDIT.\n\n`);
    this.write(`using System;\nusing Microsoft.AspNetCore.Builder;\n\n`);
    super.visitNamespaceBefore(context);
  }

  visitNamespace(context: Context) {
    this.write(`namespace ${context.namespace.name} {\n\n`);
    super.visitNamespace(context);
  }

  visitNamespaceAfter(context: Context) {
    this.write(`}\n`);
    super.visitNamespaceAfter(context);
  }

  visitInterfaceBefore(context: Context): void {
    if (!isService(context)) {
      return;
    }

    const { interface: iface } = context;
    const visitor = new ApiServiceVisitor(this.writer);
    iface.accept(context, visitor);
  }
}

export class ApiServiceVisitor extends BaseVisitor {
  visitInterfaceBefore(context: Context): void {
    let path = "";
    context.namespace.annotation("path", (a) => {
      path = a?.convert<PathDirective>().value;
    });
    this.write(`  public class Setup {\n`);
    this.write(
      `    public Setup(WebApplication app, ${pascalCase(
        context.interface.name
      )} service) {\n`
    );
    context.interface.operations.forEach((method) => {
      method.parameters.forEach((param) => {
        const parameter = JSON.parse(JSON.stringify(param));
        const type =
          translations.get(parameter.type.name) || parameter.type.name;
        if (method.annotation("GET")) {
          this.write(
            `      app.MapGet("${path}/${method.name}", (${type} ${
              param.name
            }) => service.${camelCase(method.name)}(${param.name}));\n`
          );
        } else if (method.annotation("POST")) {
          this.write(
            `      app.MapPost("${path}/${method.name}", (${type} ${
              param.name
            }) => service.${camelCase(method.name)}(${param.name}));\n`
          );
        } else if (method.annotation("PUT")) {
          this.write(
            `      app.MapPut("${path}/${method.name}", (${type} ${
              param.name
            }) => service.${camelCase(method.name)}(${param.name}));\n`
          );
        } else if (method.annotation("DELETE")) {
          this.write(
            `      app.MapDelete("${path}/${method.name}", (${type} ${
              param.name
            }) => service.${camelCase(method.name)}(${param.name}));\n`
          );
        }
      });
    });
    this.write(`    }\n  }\n`);
  }
}

// Language: typescript
