/*
Copyright 2022 The Apex Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

import { BaseVisitor, Context, Type } from "@apexlang/core/model";
import { capitalize, convertOperationToType, isService } from "../utils";
import { getMethods, getPath, hasBody } from "../rest";
import { StructVisitor } from "./struct_visitor";
import { fieldName, methodName } from "./helpers";

export class FiberVisitor extends BaseVisitor {
  visitNamespaceBefore(context: Context): void {
    const packageName = context.config.package || "module";
    this.write(`// Code generated by @apexlang/codegen. DO NOT EDIT.

package ${packageName}
  
import (
  "github.com/gofiber/fiber/v2"

  "github.com/apexlang/api-go/transport/tfiber"
  "github.com/apexlang/api-go/transport/httpresponse"
)\n\n`);
    super.triggerNamespaceBefore(context);
  }

  visitRoleBefore(context: Context): void {
    if (!isService(context)) {
      return;
    }

    const { role } = context;
    this.write(`func ${role.name}Fiber(service ${role.name}) tfiber.RegisterFn {
    return func(router fiber.Router) {\n`);
  }

  visitOperation(context: Context): void {
    if (!isService(context)) {
      return;
    }

    const { operation } = context;
    const path = getPath(context);
    if (path == "") {
      return;
    }
    const fiberPath = path.replace(/\{([a-zA-Z][a-zA-Z0-9]*)\}/g, ":$1");
    const methods = getMethods(operation).map((m) =>
      capitalize(m.toLowerCase())
    );
    let argsType: Type;

    methods.forEach((method) => {
      this.write(
        `router.${method}("${fiberPath}", func(c *fiber.Ctx) error {
          resp := httpresponse.New()
			    ctx := httpresponse.NewContext(c.Context(), resp)\n`
      );
      if (operation.isUnary()) {
        // TODO: check type
        argsType = operation.parameters[0].type as Type;
      } else if (operation.parameters.length > 0) {
        argsType = convertOperationToType(
          context.getType.bind(context),
          operation
        );
        const structVisitor = new StructVisitor(this.writer);
        argsType.accept(context.clone({ type: argsType }), structVisitor);
      }

      this.write(`var args ${argsType.name}\n`);
      if (hasBody(method)) {
        this.write(`if err := c.BodyParser(&args); err != nil {
        return err
      }\n`);
      }
      argsType.fields.forEach((f) => {
        if (path.indexOf(`{${f.name}}`) != -1) {
          // Set path argument
          this.write(`args.${fieldName(f, f.name)} = c.Params("${f.name}")\n`);
        } else if (f.annotation("query") != undefined) {
          this.write(`args.${fieldName(f, f.name)} = c.Query("${f.name}")\n`);
        }
      });

      const operMethod = methodName(operation, operation.name);
      if (operation.isUnary()) {
        this.write(`result, err := service.${operMethod}(ctx, &args)\n`);
      } else {
        const args = argsType.fields
          .map((f) => ", args." + fieldName(f, f.name))
          .join("");
        this.write(`result, err := service.${operMethod}(ctx${args})\n`);
      }
      this.write(`return tfiber.Response(c, resp, result, err)\n`);
      this.write(`   })\n`);
    });
  }

  visitRoleAfter(context: Context): void {
    if (!isService(context)) {
      return;
    }
    this.write(`  }
}\n`);
  }
}
